package com.example.tuan03_bai01.ui.screens

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.Divider
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.lifecycle.viewmodel.compose.viewModel // üî• Import ƒë·ªÉ l·∫•y ViewModel
import androidx.navigation.NavController
// üî• Kh√¥ng import UIComponentRepository n·ªØa
import com.example.tuan03_bai01.navigation.Screen

@Composable
fun ComponentsListScreen(
    navController: NavController,
    // üî• Kh·ªüi t·∫°o ViewModel b·∫±ng h√†m viewModel()
    viewModel: ComponentsListViewModel = viewModel()
) {
    // üî• L·∫Øng nghe v√† l·∫•y tr·∫°ng th√°i UI t·ª´ ViewModel
    val uiState by viewModel.uiState.collectAsState()

    Column(
        modifier = Modifier
            .fillMaxSize()
            // S·ª≠ d·ª•ng padding chu·∫©n c·ªßa Material Design ho·∫∑c t√πy ch·ªânh nh·∫π nh√†ng h∆°n
            .padding(horizontal = 16.dp, vertical = 8.dp)
    ) {
        // Ti√™u ƒë·ªÅ ch√≠nh
        Text(
            text = "UI Components List",
            style = MaterialTheme.typography.headlineMedium, // C√≥ th·ªÉ d√πng headlineMedium
            fontWeight = FontWeight.Bold,
            color = MaterialTheme.colorScheme.primary, // D√πng m√†u t·ª´ theme
            modifier = Modifier
                .fillMaxWidth()
                .padding(vertical = 16.dp), // TƒÉng padding d·ªçc cho ti√™u ƒë·ªÅ
            textAlign = TextAlign.Center
        )

        // üî• Hi·ªÉn th·ªã n·ªôi dung d·ª±a tr√™n tr·∫°ng th√°i t·ª´ ViewModel
        Box(modifier = Modifier.fillMaxSize()) { // Box bao ngo√†i ƒë·ªÉ cƒÉn gi·ªØa loading/error
            when {
                // 1. Tr·∫°ng th√°i ƒëang t·∫£i
                uiState.isLoading -> {
                    CircularProgressIndicator(modifier = Modifier.align(Alignment.Center))
                }
                // 2. Tr·∫°ng th√°i l·ªói
                uiState.error != null -> {
                    Text(
                        text = uiState.error ?: "An unexpected error occurred",
                        color = MaterialTheme.colorScheme.error,
                        textAlign = TextAlign.Center,
                        modifier = Modifier
                            .align(Alignment.Center)
                            .padding(16.dp)
                    )
                }
                // 3. Tr·∫°ng th√°i th√†nh c√¥ng
                else -> {
                    // üî• S·ª≠ d·ª•ng LazyColumn ƒë·ªÉ hi·ªÉn th·ªã danh s√°ch t·ª´ uiState
                    LazyColumn(
                        modifier = Modifier.fillMaxSize(),
                        verticalArrangement = Arrangement.spacedBy(8.dp) // Kho·∫£ng c√°ch gi·ªØa c√°c item/nh√≥m
                    ) {
                        // Duy·ªát qua danh s√°ch ƒë√£ nh√≥m t·ª´ uiState
                        uiState.groupedComponents.forEach { (category, components) ->
                            // a. Hi·ªÉn th·ªã ti√™u ƒë·ªÅ nh√≥m
                            item {
                                Text(
                                    text = category,
                                    style = MaterialTheme.typography.titleLarge,
                                    fontWeight = FontWeight.Bold,
                                    modifier = Modifier
                                        .fillMaxWidth()
                                        .padding(top = 16.dp, bottom = 8.dp), // Kho·∫£ng c√°ch tr√™n/d∆∞·ªõi ti√™u ƒë·ªÅ nh√≥m
                                    color = MaterialTheme.colorScheme.onSurfaceVariant
                                )
                            }

                            // b. Hi·ªÉn th·ªã danh s√°ch button cho t·ª´ng component trong nh√≥m
                            items(components) { component ->
                                Button(
                                    // ƒêi·ªÅu h∆∞·ªõng v·∫´n th·ª±c hi·ªán ·ªü View
                                    onClick = { navController.navigate(Screen.ComponentDetail.createRoute(component.name)) },
                                    modifier = Modifier.fillMaxWidth(),
                                    shape = RoundedCornerShape(12.dp),
                                    colors = ButtonDefaults.buttonColors(
                                        containerColor = MaterialTheme.colorScheme.surfaceVariant, // M√†u n·ªÅn nh·∫π nh√†ng h∆°n
                                        contentColor = MaterialTheme.colorScheme.onSurfaceVariant
                                    )
                                ) {
                                    Column(
                                        modifier = Modifier
                                            .fillMaxWidth()
                                            .padding(vertical = 12.dp, horizontal = 8.dp), // Padding b√™n trong button
                                        horizontalAlignment = Alignment.Start
                                    ) {
                                        Text(
                                            text = component.name,
                                            style = MaterialTheme.typography.titleMedium.copy(fontWeight = FontWeight.SemiBold), // D√πng titleMedium
                                        )
                                        Spacer(modifier = Modifier.height(4.dp))
                                        Text(
                                            text = component.description,
                                            style = MaterialTheme.typography.bodyMedium,
                                        )
                                    }
                                }
                            }

                            // c. Th√™m Divider sau m·ªói nh√≥m (tr·ª´ nh√≥m cu·ªëi c√πng n·∫øu mu·ªën)
                            item {
                                Divider(modifier = Modifier.padding(top = 16.dp))
                            }
                        }
                    }
                }
            }
        }
    }
}