package com.example.tuan03_bai01.ui.screens

import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.lifecycle.viewmodel.compose.viewModel // üî• Import ƒë·ªÉ l·∫•y ViewModel
import androidx.navigation.NavController
import com.example.tuan03_bai01.R
// üî• Kh√¥ng import UIComponentRepository n·ªØa
// Import c√°c Demo Composable (gi·ªØ nguy√™n)
import com.example.tuan03_bai01.ui.components.demos.*

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun ComponentDetailScreen(
    navController: NavController,
    // üî• Kh√¥ng c·∫ßn truy·ªÅn componentName v√†o ƒë√¢y n·ªØa
    // üî• Kh·ªüi t·∫°o ViewModel b·∫±ng h√†m viewModel()
    viewModel: ComponentDetailViewModel = viewModel()
) {
    // üî• L·∫Øng nghe v√† l·∫•y tr·∫°ng th√°i UI t·ª´ ViewModel
    val uiState by viewModel.uiState.collectAsState()
    val scrollState = rememberScrollState()

    Scaffold(
        topBar = {
            TopAppBar(
                title = {
                    Text(
                        // üî• L·∫•y t√™n component t·ª´ uiState
                        text = "${uiState.componentName} Demo",
                        style = MaterialTheme.typography.titleLarge.copy(fontWeight = FontWeight.Bold),
                        textAlign = TextAlign.Center,
                        modifier = Modifier
                            .fillMaxWidth()
                            // ƒêi·ªÅu ch·ªânh padding ƒë·ªÉ ti√™u ƒë·ªÅ th·ª±c s·ª± ·ªü gi·ªØa khi c√≥ icon back
                            .padding(end = 48.dp) // 48dp l√† k√≠ch th∆∞·ªõc th∆∞·ªùng th·∫•y c·ªßa icon button
                    )
                },
                navigationIcon = {
                    IconButton(onClick = { navController.popBackStack() }) { // ƒêi·ªÅu h∆∞·ªõng back v·∫´n ·ªü View
                        Image(
                            painter = painterResource(id = R.drawable.ic_back),
                            contentDescription = "Back",
                            modifier = Modifier.size(24.dp)
                        )
                    }
                },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = MaterialTheme.colorScheme.primary,
                    titleContentColor = MaterialTheme.colorScheme.onPrimary,
                    navigationIconContentColor = MaterialTheme.colorScheme.onPrimary
                )
            )
        }
    ) { paddingValues ->
        // üî• Column ch·ª©a n·ªôi dung, √°p d·ª•ng padding t·ª´ Scaffold v√† cho ph√©p cu·ªôn
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues) // √Åp d·ª•ng padding an to√†n t·ª´ Scaffold
                .verticalScroll(scrollState) // Cho ph√©p cu·ªôn
                .padding(horizontal = 16.dp) // Padding ngang cho n·ªôi dung b√™n trong
        ) {
            // üî• Box ƒë·ªÉ hi·ªÉn th·ªã loading ho·∫∑c error ·ªü gi·ªØa ph·∫ßn n·ªôi dung
            Box(modifier = Modifier
                .fillMaxWidth()
                .padding(vertical = 32.dp)) { // Th√™m padding d·ªçc ƒë·ªÉ kh√¥ng d√≠nh s√°t AppBar
                when {
                    // 1. Tr·∫°ng th√°i ƒëang t·∫£i
                    uiState.isLoading -> {
                        CircularProgressIndicator(modifier = Modifier.align(Alignment.Center))
                    }
                    // 2. Tr·∫°ng th√°i l·ªói
                    uiState.error != null -> {
                        Text(
                            text = uiState.error ?: "An unexpected error occurred",
                            color = MaterialTheme.colorScheme.error,
                            textAlign = TextAlign.Center,
                            modifier = Modifier
                                .align(Alignment.Center)
                                .padding(16.dp)
                        )
                    }
                    // 3. Tr·∫°ng th√°i th√†nh c√¥ng -> Hi·ªÉn th·ªã m√¥ t·∫£ v√† demo
                    else -> {
                        Column { // Column ri√™ng cho n·ªôi dung th√†nh c√¥ng
                            // Hi·ªÉn th·ªã M√¥ t·∫£ Component t·ª´ uiState
                            Text(
                                text = uiState.componentDescription,
                                style = MaterialTheme.typography.bodyLarge,
                                modifier = Modifier
                                    .padding(top = 16.dp, bottom = 8.dp) // Kho·∫£ng c√°ch tr√™n/d∆∞·ªõi m√¥ t·∫£
                                    .fillMaxWidth(),
                                textAlign = TextAlign.Center,
                                color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)
                            )

                            Divider(modifier = Modifier.padding(vertical = 16.dp)) // NgƒÉn c√°ch

                            // üî• Hi·ªÉn th·ªã Demo d·ª±a tr√™n componentName t·ª´ uiState
                            ShowComponentDemo(componentName = uiState.componentName)

                            Spacer(modifier = Modifier.height(16.dp)) // Kho·∫£ng tr·ªëng d∆∞·ªõi c√πng
                        }
                    }
                }
            }
        }
    }
}

/**
 * Composable ph·ª• tr·ª£ ƒë·ªÉ hi·ªÉn th·ªã Composable Demo t∆∞∆°ng ·ª©ng.
 * Gi√∫p cho ComponentDetailScreen g·ªçn g√†ng h∆°n.
 */
@Composable
private fun ShowComponentDemo(componentName: String) {
    // Kh·ªëi when ƒë·ªÉ ch·ªçn v√† hi·ªÉn th·ªã Demo ph√π h·ª£p
    when (componentName) {
        "Text" -> TextDemo()
        "Image" -> ImageDemo()
        "TextField" -> TextFieldDemo()
        "PasswordField" -> PasswordFieldDemo()
        "Column" -> ColumnDemo()
        "Row" -> RowDemo()
        // Tr∆∞·ªùng h·ª£p m·∫∑c ƒë·ªãnh n·∫øu componentName kh√¥ng kh·ªõp
        else -> {
            Text(
                text = "Demo for '$componentName' is not implemented yet.",
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(16.dp),
                textAlign = TextAlign.Center,
                color = MaterialTheme.colorScheme.onSurfaceVariant // M√†u ch·ªØ nh·∫π nh√†ng
            )
        }
    }
}