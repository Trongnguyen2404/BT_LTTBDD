package com.example.tuan03_bai01.ui.components.demos

import androidx.compose.foundation.Image
import androidx.compose.foundation.border
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Divider
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.unit.dp
import com.example.tuan03_bai01.R // ƒê·∫£m b·∫£o b·∫°n ƒë√£ import R ƒë√∫ng c√°ch

@Composable
fun ImageDemo() {
    // üî• Quan tr·ªçng: ƒê·∫£m b·∫£o b·∫°n c√≥ ·∫£nh trong res/drawable
    // V√≠ d·ª•: ic_launcher_foreground (c√≥ s·∫µn) ho·∫∑c th√™m ·∫£nh c·ªßa b·∫°n (vd: placeholder_image.png)
    val imageResId = R.drawable.ic_launcher_foreground // Thay b·∫±ng ·∫£nh c·ªßa b·∫°n n·∫øu mu·ªën

    Column(
        modifier = Modifier
            .padding(16.dp)
            .fillMaxWidth(),
        horizontalAlignment = Alignment.CenterHorizontally // CƒÉn gi·ªØa c√°c ·∫£nh trong Column
    ) {
        // --- V√≠ d·ª• 1: Image C∆° b·∫£n ---
        Text(
            text = "Basic Image",
            style = MaterialTheme.typography.titleMedium,
            modifier = Modifier.padding(bottom = 8.dp).align(Alignment.Start) // CƒÉn l·ªÅ tr√°i cho ti√™u ƒë·ªÅ
        )
        Image(
            painter = painterResource(id = imageResId),
            contentDescription = "Basic Android Image", // M√¥ t·∫£ cho Accessibility
            modifier = Modifier
                .size(100.dp) // K√≠ch th∆∞·ªõc c·ªë ƒë·ªãnh
                .padding(bottom = 16.dp)
        )
        Divider(modifier = Modifier.fillMaxWidth())
        Spacer(modifier = Modifier.height(16.dp))

        // --- V√≠ d·ª• 2: Image v·ªõi ContentScale ---
        Text(
            text = "Image with ContentScale.Crop",
            style = MaterialTheme.typography.titleMedium,
            modifier = Modifier.padding(bottom = 8.dp).align(Alignment.Start)
        )
        Image(
            painter = painterResource(id = imageResId),
            contentDescription = "Cropped Image",
            modifier = Modifier
                .size(150.dp, 100.dp) // K√≠ch th∆∞·ªõc kh√°c nhau
                .padding(bottom = 16.dp),
            contentScale = ContentScale.Crop // C·∫Øt ·∫£nh ƒë·ªÉ l·∫•p ƒë·∫ßy kh√¥ng gian, gi·ªØ t·ª∑ l·ªá
        )
        Divider(modifier = Modifier.fillMaxWidth())
        Spacer(modifier = Modifier.height(16.dp))

        Text(
            text = "Image with ContentScale.Fit",
            style = MaterialTheme.typography.titleMedium,
            modifier = Modifier.padding(bottom = 8.dp).align(Alignment.Start)
        )
        Image(
            painter = painterResource(id = imageResId),
            contentDescription = "Fit Image",
            modifier = Modifier
                .size(150.dp, 100.dp) // K√≠ch th∆∞·ªõc kh√°c nhau
                .border(1.dp, Color.Gray) // Th√™m vi·ªÅn ƒë·ªÉ th·∫•y r√µ k√≠ch th∆∞·ªõc
                .padding(bottom = 16.dp),
            contentScale = ContentScale.Fit // Thu nh·ªè/Ph√≥ng to ·∫£nh ƒë·ªÉ v·ª´a kh√¥ng gian, gi·ªØ t·ª∑ l·ªá
        )
        Divider(modifier = Modifier.fillMaxWidth())
        Spacer(modifier = Modifier.height(16.dp))

        // --- V√≠ d·ª• 3: Image v·ªõi Shape (Circle) ---
        Text(
            text = "Circular Image",
            style = MaterialTheme.typography.titleMedium,
            modifier = Modifier.padding(bottom = 8.dp).align(Alignment.Start)
        )
        Image(
            painter = painterResource(id = imageResId),
            contentDescription = "Circular Image",
            modifier = Modifier
                .size(120.dp)
                .clip(CircleShape) // C·∫Øt ·∫£nh th√†nh h√¨nh tr√≤n
                .border(2.dp, Color.Cyan, CircleShape) // Th√™m vi·ªÅn tr√≤n
                .padding(bottom = 16.dp),
            contentScale = ContentScale.Crop // Th∆∞·ªùng d√πng Crop v·ªõi ·∫£nh tr√≤n
        )
        Divider(modifier = Modifier.fillMaxWidth())
        Spacer(modifier = Modifier.height(16.dp))

        // --- V√≠ d·ª• 4: Image v·ªõi Rounded Corners ---
        Text(
            text = "Image with Rounded Corners",
            style = MaterialTheme.typography.titleMedium,
            modifier = Modifier.padding(bottom = 8.dp).align(Alignment.Start)
        )
        Image(
            painter = painterResource(id = imageResId),
            contentDescription = "Rounded Corner Image",
            modifier = Modifier
                .size(150.dp, 100.dp)
                .clip(RoundedCornerShape(16.dp)) // Bo g√≥c
                .padding(bottom = 16.dp),
            contentScale = ContentScale.Crop
        )
    }
}